{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","dispatch","Date","length","timestamp","toDate","toUTCString","AttachFile","displayName","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","Login","alt","Button","signInWithPopup","then","result","catch","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"6YAcMA,EADcC,IAASC,cAXN,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIIC,YACjBC,EAAOX,IAASW,OAChBC,EAAW,IAAIZ,IAASW,KAAKE,mBAGpBd,ICoCAe,MA/Cf,YAAgD,IAAD,EAAxBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAAc,EACnBC,mBAAS,IADU,mBACpCC,EADoC,KAC9BC,EAD8B,OAEXF,mBAAS,IAFE,mBAEpCG,EAFoC,KAE1BC,EAF0B,KA2B3C,OAtBAC,qBAAU,WACFR,GACAhB,EAAGyB,WAAW,SAASC,IAAIV,GAAIS,WAAW,YAAYE,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAAQ,OAClGN,EAAYM,EAASC,KAAKC,KAAI,SAACL,GAAD,OAASA,EAAIM,gBAGpD,IAEHR,qBAAU,WACNH,EAAQY,KAAKC,MAAsB,IAAhBD,KAAKE,aACzB,IAYKjB,EAcA,yBAAKkB,QAvBM,WACf,IAAMC,EAAWC,OAAO,+BACpBD,GACArC,EAAGyB,WAAW,SAASc,IAAI,CACvBtB,KAAMoB,KAmBgBG,UAAU,eAChC,6CAbR,kBAAC,IAAD,CAAMC,GAAE,iBAAYzB,IAChB,yBAAKwB,UAAU,eACX,kBAACE,EAAA,EAAD,CAAQC,IAAG,qDAAgDvB,EAAhD,UACX,yBAAKoB,UAAU,qBACX,4BAAKvB,GACL,qCAAIK,EAAS,UAAb,aAAI,EAAasB,aCvCxBC,EAAeC,0BAEfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OACzB,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC7CC,IAIII,EAAgB,kBAAMC,qBAAWV,I,4ECqE/BW,MAlEf,WAAoB,IAAD,EAEWrC,mBAAS,IAFpB,mBAERsC,EAFQ,KAEDC,EAFC,OAGcJ,IAHd,mBAGNK,EAHM,KAGNA,KAiBT,OApBe,KAKfnC,qBAAU,WACN,IAAMoC,EAAc5D,EAAGyB,WAAW,SAASG,YAAW,SAAAC,GAAQ,OAC1D6B,EAAS7B,EAASC,KAAKC,KAAI,SAAAL,GAAG,MAAK,CAC/BV,GAAIU,EAAIV,GACRgB,KAAMN,EAAIM,eAGlB,OAAO,WACH4B,OAEL,IAMC,yBAAKpB,UAAU,WAGX,yBAAKA,UAAU,mBACX,kBAACE,EAAA,EAAD,CAAQC,IAAG,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAME,WADvB,IAEI,yBAAKrB,UAAU,wBACX,kBAACsB,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,SAOZ,yBAAKtB,UAAU,mBACX,yBAAKA,UAAU,4BACX,kBAAC,IAAD,MACA,2BAAOuB,YAAY,4BAA4BC,KAAK,WAQ5D,yBAAKxB,UAAU,kBACX,kBAAC,EAAD,CAAatB,YAAU,IACtBuC,EAAM1B,KAAI,SAAAkC,GACP,OAAO,kBAAC,EAAD,CAAaC,IAAKD,EAAKjD,GAAIA,GAAIiD,EAAKjD,GAAIC,KAAMgD,EAAKjC,KAAKf,a,2ECoDpEkD,MAxGf,WAAiB,IAAD,MAEYhD,mBAAS,IAFrB,mBAELC,EAFK,KAECC,EAFD,OAGcF,mBAAS,IAHvB,mBAGLiD,EAHK,KAGEC,EAHF,KAIJC,EAAWC,cAAXD,OAJI,EAKoBnD,mBAAS,IAL7B,mBAKLkB,EALK,KAKKmC,EALL,OAMoBrD,mBAAS,IAN7B,mBAMLG,EANK,KAMKC,EANL,OAOiB+B,IAPjB,sBAOHK,EAPG,EAOHA,KAgCT,OAvCY,EAOGc,SAEfjD,qBAAU,WACF8C,GACAtE,EAAGyB,WAAW,SAASC,IAAI4C,GAAQ1C,YAAW,SAAAC,GAC1C2C,EAAY3C,EAASG,OAAOf,SAIpCjB,EAAGyB,WAAW,SAASC,IAAI4C,GAAQ7C,WAAW,YAAYE,QAAQ,YAAa,OAAOC,YAAW,SAAAC,GAAQ,OACrGN,EAAYM,EAASC,KAAKC,KAAI,SAAAL,GAAG,OAAIA,EAAIM,gBAE9C,CAACsC,IAIJ9C,qBAAU,WACNH,EAAQY,KAAKC,MAAsB,IAAhBD,KAAKE,aACzB,CAACmC,IAeA,yBAAK9B,UAAU,QACX,yBAAKA,UAAU,gBAEX,kBAACE,EAAA,EAAD,CAAQC,IAAG,qDAAgDvB,EAAhD,UAEX,yBAAKoB,UAAU,oBACX,4BAAKH,GACL,2BAAI,IAAIqC,KAAJ,UAASpD,EAASA,EAASqD,OAAS,UAApC,iBAAS,EAA+BC,iBAAxC,aAAS,EAA0CC,UAAUC,gBAGrE,yBAAKtC,UAAU,qBACX,kBAACsB,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAACiB,EAAA,EAAD,OAEJ,kBAACjB,EAAA,EAAD,KACI,kBAAC,IAAD,SAQZ,yBAAKtB,UAAU,cACVlB,EAASS,KAAI,SAAAa,GAAO,aACjB,uBAAGJ,UAAS,wBAAmBI,EAAQ3B,OAAS0C,EAAKqB,aAAe,mBAChE,0BAAMxC,UAAU,cACXI,EAAQ3B,MAEZ2B,EAAQA,QACT,0BAAMJ,UAAU,mBACX,IAAIkC,KAAJ,UAAS9B,EAAQgC,iBAAjB,aAAS,EAAmBC,UAAUC,oBASvD,yBAAKtC,UAAU,gBACX,kBAAC,IAAD,MACA,8BACI,2BACIwB,KAAK,OACLD,YAAY,iBACZX,MAAOgB,EACPa,SAAU,SAAAC,GACNb,EAASa,EAAEC,OAAO/B,UAG1B,4BAAQY,KAAK,SAAS5B,QAlElB,SAAC8C,GACjBA,EAAEE,iBACFpF,EAAGyB,WAAW,SAASC,IAAI4C,GAAQ7C,WAAW,YAAYc,IAAI,CAC1DK,QAASwB,EACTnD,KAAM0C,EAAKqB,YACXJ,UAAW3E,IAASU,UAAU0E,WAAWC,oBAE7CjB,EAAS,MA2DG,iBAEJ,kBAAC,IAAD,S,iCC7GHkB,EACC,WAgBCvC,EAbC,SAACwC,EAAOC,GACpB,OAAQA,EAAOzB,MACX,KAAKuB,EACD,OAAO,2BACAC,GADP,IAEI7B,KAAM8B,EAAO9B,OAErB,QACI,OAAO6B,ICyBJE,MAjCf,WAAkB,IAAD,EAEWpC,IAFX,yCAEDmB,EAFC,KAgBb,OACI,yBAAKjC,UAAU,SACX,yBAAKA,UAAU,oBAEX,yBAAKG,IAAI,gGAAgGgD,IAAI,kBAE7G,yBAAKnD,UAAU,eACX,oDAGJ,kBAACoD,EAAA,EAAD,CAAQxD,QArBL,WACXxB,EAAKiF,gBAAgBhF,GAChBiF,MAAK,SAAAC,GACFtB,EAAS,CACLT,KAAMuB,EACN5B,KAAMoC,EAAOpC,UAGpBqC,OAAM,SAAAd,GAAC,OAAIe,MAAMf,EAAEtC,cAahB,0BCYDsD,MAlCf,WAAgB,IAAD,EAEgB5C,IAFhB,mBAEJK,EAFI,KAEJA,KAET,OAJa,KAKX,yBAAKnB,UAAU,OAEXmB,EAGE,yBAAKnB,UAAU,aACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2D,KAAK,kBACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAIF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UAbV,kBAAC,EAAD,QCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe1D,aJVS,CACxBU,KAAM,MISqCX,QAASA,GAClD,kBAAC,EAAD,QAGJ4D,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLC,QAAQD,MAAMA,EAAMvE,c","file":"static/js/main.ca5f6763.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBxbnO-BHj_wt4oqssTeKzHxdyR7z267n4\",\r\n    authDomain: \"whatsapp-clone-cdd0d.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-clone-cdd0d.firebaseio.com\",\r\n    projectId: \"whatsapp-clone-cdd0d\",\r\n    storageBucket: \"whatsapp-clone-cdd0d.appspot.com\",\r\n    messagingSenderId: \"982682430021\",\r\n    appId: \"1:982682430021:web:c4fa7122dfa0e74b10112c\",\r\n    measurementId: \"G-6HCP04JDHC\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);//initialize the app with the firebase config\r\nconst db = firebaseApp.firestore();//acces the firestore instance of our firebase config...gets the db\r\nconst auth = firebase.auth();//auth handler\r\nconst provider = new firebase.auth.GoogleAuthProvider();//needed for google auth\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './SidebarChat.css'\r\nimport { Avatar } from '@material-ui/core';\r\nimport db from './firebase';\r\n\r\n\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n    const [seed, setSeed] = useState(\"\")\r\n    const [messages, setMessages] = useState(\"\")\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            db.collection('rooms').doc(id).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => (\r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\r\n            ))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000))\r\n    }, [])\r\n\r\n\r\n    const createChat = () => {\r\n        const roomName = prompt(\"Please enter name for chat!\")\r\n        if (roomName) {\r\n            db.collection('rooms').add({/* set up NEW ROOM */\r\n                name: roomName\r\n            })\r\n        }\r\n    }\r\n\r\n    return !addNewChat ? (\r\n\r\n        <Link to={`/rooms/${id}`}>\r\n            <div className=\"sidebarChat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/avataaars/${seed}.svg`} />\r\n                <div className=\"sidebarChat__info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n\r\n\r\n    ) : (\r\n            <div onClick={createChat} className=\"sidebarChat\">\r\n                <h2>Add new Chat</h2>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default SidebarChat\r\n","import React, { createContext, useContext, useReducer } from 'react'\r\n\r\n\r\nexport const StateContext = createContext(); //data layer will live here\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);//this is the data layer...hoc\r\n\r\nexport const useStateValue = () => useContext(StateContext)//pull information from data layer","import React, { useState, useEffect } from 'react'\r\nimport './Sidebar.css'\r\nimport SidebarChat from './SidebarChat'\r\nimport db from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\n\r\n//importing icons\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge'\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\r\n\r\n\r\nfunction Sidebar() {\r\n\r\n    const [rooms, setRooms] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection('rooms').onSnapshot(snapshot => (\r\n            setRooms(snapshot.docs.map(doc => ({//docs = list of docs in the database\r\n                id: doc.id,\r\n                data: doc.data()\r\n            })))\r\n        ))\r\n        return () => {\r\n            unsubscribe(); //cleanup for snapshot\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n\r\n\r\n            <div className=\"sidebar__header\">\r\n                <Avatar src={user?.photoURL} /> {/* ? = protect against async invalidity for the first few seconds */}\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlined />\r\n                    <input placeholder=\"Search or start new chart\" type=\"text\" />\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat addNewChat />\r\n                {rooms.map(room => {\r\n                    return <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n                })}\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport './Chat.css';\r\nimport db from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\nimport firebase from 'firebase';\r\n\r\n\r\n\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport { SearchOutlined, AttachFile, MoreVert } from '@material-ui/icons';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\n\r\n\r\n\r\n\r\nfunction Chat() {\r\n\r\n    const [seed, setSeed] = useState(\"\");\r\n    const [input, setInput] = useState(\"\");\r\n    const { roomId } = useParams();\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [messages, setMessages] = useState([])\r\n    const [{ user, dispatch }] = useStateValue()\r\n\r\n    useEffect(() => {\r\n        if (roomId) {\r\n            db.collection('rooms').doc(roomId).onSnapshot(snapshot => {\r\n                setRoomName(snapshot.data().name)\r\n            })\r\n        }\r\n\r\n        db.collection('rooms').doc(roomId).collection('messages').orderBy('timestamp', 'asc').onSnapshot(snapshot => (\r\n            setMessages(snapshot.docs.map(doc => doc.data()))\r\n        ))\r\n    }, [roomId])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000))\r\n    }, [roomId])\r\n\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        db.collection('rooms').doc(roomId).collection('messages').add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp() //SERVER's timestamp\r\n        })\r\n        setInput(\"\"); /* clear inputs */\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n\r\n                <Avatar src={`https://avatars.dicebear.com/api/avataaars/${seed}.svg`} />\r\n\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>{new Date(messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}</p>\r\n                </div>\r\n\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlined />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFile />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            <div className=\"chat__body\">\r\n                {messages.map(message => (\r\n                    <p className={`chat__message ${message.name === user.displayName && 'chat__receiver'}`}>\r\n                        <span className=\"chat__name\">\r\n                            {message.name}\r\n                        </span>\r\n                        {message.message}\r\n                        <span className=\"chat__timestamp\">\r\n                            {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                        </span>\r\n                    </p>\r\n                ))}\r\n\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"chat__footer\">\r\n                <InsertEmoticonIcon />\r\n                <form>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Type a message\"\r\n                        value={input}\r\n                        onChange={e => {\r\n                            setInput(e.target.value)\r\n                        }}\r\n                    />\r\n                    <button type=\"submit\" onClick={sendMessage}>Send message</button>\r\n                </form>\r\n                <MicIcon />\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n    user: null//user initially not signed in\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\"//push info inside the data layer\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default reducer","import React from 'react'\r\nimport './Login.css'\r\nimport { Button } from '@material-ui/core'\r\nimport { auth, provider } from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\nimport { actionTypes } from './reducer';\r\n\r\n\r\nfunction Login() {\r\n\r\n    const [{ }, dispatch] = useStateValue();\r\n\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n            .then(result => {\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: result.user\r\n                })\r\n            })\r\n            .catch(e => alert(e.message))\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/597px-WhatsApp.svg.png\" alt=\"whatsappImage\" />\r\n\r\n                <div className=\"login__text\">\r\n                    <h1>Sign in to WhatsApp</h1>\r\n                </div>\r\n\r\n                <Button onClick={signIn}>Sign In with Google</Button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\n\n\n\n\nfunction App() {\n\n  const [{ user }, dispatch] = useStateValue(null);\n\n  return (\n    <div className=\"app\">\n\n      {!user ? (\n        <Login />\n      ) : (\n          <div className=\"app__body\">\n            <Router>{/* this is where we tell the app to look for the url */}\n\n              <Switch>\n                <Route path=\"/rooms/:roomId\" >\n                  <Sidebar />\n                  <Chat />\n                </Route>\n\n\n                <Route path=\"/\" >\n                  <Sidebar />\n                </Route>\n\n\n              </Switch>\n            </Router>\n          </div>\n        )}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './StateProvider';\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}